#!/usr/bin/env python

import argparse

from utils import (get_data_to_parse, initial_file_load,
                   initialise_counter_dict, write_to_file)


def get_all_media_sent_messages(messages):
    media_messages = []
    for message in messages:
        if (
            message.get("photos")
            or message.get("videos")
            or message.get("files")
            or message.get("audio")
            or message.get("gifs")
        ):
            media_messages.append(message)
    return media_messages


def count_media_sent_by_participants(all_media_sent_messages, media_sender):
    for message in all_media_sent_messages:
        sender_name = message["sender_name"]
        media_sender[message["sender_name"]] = media_sender.get(sender_name, 0) + 1

    media_sender = dict(
        sorted(media_sender.items(), key=lambda item: item[1], reverse=True)
    )
    return media_sender


def get_media_sent_by_participant_count_breakdowns(
    all_media_sent_messages, participants
):
    media_sent_breakdown = {}

    for participant in participants:
        media_sent_breakdown[participant] = {
            "photos": 0,
            "videos": 0,
            "files": 0,
            "audio": 0,
            "gifs": 0,
        }

    for message in all_media_sent_messages:
        for media_type in ["photos", "videos", "files", "audio", "gifs"]:
            if message.get(media_type):
                media_sent_breakdown[message["sender_name"]][media_type] += len(
                    message.get(media_type)
                )

    for participant in media_sent_breakdown:
        media_sent_breakdown[participant] = dict(
            sorted(
                media_sent_breakdown[participant].items(),
                key=lambda item: item[1],
                reverse=True,
            )
        )
    return media_sent_breakdown


def get_media_sent_by_type_count_breakdowns(all_media_sent_messages):
    media_sent_breakdown = {}
    for message in all_media_sent_messages:
        for media_type in ["photos", "videos", "files", "audio", "gifs"]:
            if message.get(media_type):
                media_sent_breakdown[media_type] = media_sent_breakdown.get(
                    media_type, 0
                ) + len(message.get(media_type))

    media_sent_breakdown = dict(
        sorted(media_sent_breakdown.items(), key=lambda item: item[1], reverse=True)
    )
    return media_sent_breakdown


def get_media_detail_sent_by_specific_participant(
    all_media_sent_messages, specific_participant, specific_mediatype
):
    data = {}
    if specific_mediatype:
        data[specific_participant] = {specific_mediatype: []}
    else:
        data[specific_participant] = {
            "photos": [],
            "videos": [],
            "files": [],
            "audio": [],
            "gifs": [],
        }

    for message in all_media_sent_messages:
        for media_type in (
            [specific_mediatype]
            if specific_mediatype
            else ["photos", "videos", "files", "audio", "gifs"]
        ):
            if message.get("sender_name") == specific_participant and message.get(
                media_type
            ):
                data[specific_participant][media_type].append(message[media_type])

    for media_type in data[specific_participant]:
        data[specific_participant][media_type] = [
            item
            for sublist in data[specific_participant][media_type]
            for item in sublist
        ]
    return data


def main(
    *,
    data_to_parse,
    date_range_start,
    date_range_end,
    specific_participant,
    specific_mediatype,
):
    messages, participants = get_data_to_parse(
        data_to_parse, date_range_start, date_range_end
    )

    data = {}
    media_sender = initialise_counter_dict(participants)
    all_media_sent_messages = get_all_media_sent_messages(messages)
    if specific_participant:
        data["specific_participant"] = get_media_detail_sent_by_specific_participant(
            all_media_sent_messages, specific_participant, specific_mediatype
        )
    if specific_mediatype:
        data[f"{specific_mediatype}_sent_totals"] = count_media_sent_by_participants(
            all_media_sent_messages, media_sender
        )
    else:
        data["media_sent_totals"] = count_media_sent_by_participants(
            all_media_sent_messages, media_sender
        )
    data["media_sent_breakdowns_participant"] = (
        get_media_sent_by_participant_count_breakdowns(
            all_media_sent_messages, participants
        )
    )
    data["media_sent_breakdowns_media_type"] = get_media_sent_by_type_count_breakdowns(
        all_media_sent_messages
    )

    write_to_file(
        file_name="media_mogul_results.json",
        data=data,
    )


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-f", "--file", type=str, required=True)
    parser.add_argument("--multichat", type=bool, default=False)
    parser.add_argument(
        "--drstart",
        type=str,
        help="The date range start for getting messages, format needs to be (YYYY-MM)",
    )
    parser.add_argument(
        "--drend",
        type=str,
        help="The date range end for getting messages, format needs to be (YYYY-MM)",
    )
    parser.add_argument(
        "--participant",
        type=str,
        help="Get a certain participants media",
    )
    parser.add_argument(
        "--mediatype",
        type=str,
        help="Get a specific media type",
        choices=["photos", "videos", "files", "audio", "gifs"],
    )
    args = parser.parse_args()

    main(
        data_to_parse=initial_file_load(args.file, args.multichat),
        date_range_start=args.drstart,
        date_range_end=args.drend,
        specific_participant=args.participant,
        specific_mediatype=args.mediatype,
    )
