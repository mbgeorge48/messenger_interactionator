#!/usr/bin/env python

import argparse
from datetime import timedelta
import cv2
import os.path

from moviepy.editor import AudioFileClip


from utils import (
    get_data_to_parse,
    initial_file_load,
    initialise_counter_dict,
    write_to_file,
)

MEDIA_TYPES = ["photos", "videos", "files", "audio", "gifs"]


def time_to_seconds(time):
    """Converts a time string formatted like H:M:S to seconds."""
    h, m, s = map(int, time.split(":"))
    return h * 3600 + m * 60 + s


def update_time_value(current_duration, new_duration):
    total_duration = current_duration + new_duration
    return str(timedelta(seconds=total_duration)).split(".")[0]


def get_media_duration(*, media_type, message):
    for file in message.get(media_type):
        file_path = os.path.dirname(__file__).replace("src", "") + file["uri"]
        if os.path.isfile(file_path):
            match media_type:
                case "videos":
                    media_file = cv2.VideoCapture(file_path)
                    fps = media_file.get(cv2.CAP_PROP_FPS)
                    frame_count = int(media_file.get(cv2.CAP_PROP_FRAME_COUNT))
                    media_duration = frame_count / fps
                case "audio":
                    media_file = AudioFileClip(file_path)
                    media_duration = media_file.duration
    return media_duration


def get_all_media_sent_messages(messages):
    media_messages = []
    for message in messages:
        if (
            message.get("photos")
            or message.get("videos")
            or message.get("files")
            or message.get("audio")
            or message.get("gifs")
        ):
            media_messages.append(message)
    return media_messages


def count_media_sent_by_participants(all_media_sent_messages, media_sender):
    for message in all_media_sent_messages:
        sender_name = message["sender_name"]
        media_sender[message["sender_name"]] = media_sender.get(sender_name, 0) + 1

    media_sender = dict(
        sorted(media_sender.items(), key=lambda item: item[1], reverse=True)
    )
    return media_sender


def get_media_sent_by_participant_count_breakdowns(
    all_media_sent_messages, participants
):
    media_sent_breakdown = {}

    for participant in participants:
        media_sent_breakdown[participant] = {
            media_type: 0 for media_type in MEDIA_TYPES
        }

    for message in all_media_sent_messages:
        for media_type in MEDIA_TYPES:
            if message.get(media_type):
                media_sent_breakdown[message["sender_name"]][media_type] += len(
                    message.get(media_type)
                )

    for participant in media_sent_breakdown:
        media_sent_breakdown[participant] = dict(
            sorted(
                media_sent_breakdown[participant].items(),
                key=lambda item: item[1],
                reverse=True,
            )
        )
    return media_sent_breakdown


def get_time_length_of_media_types(all_media_sent_messages, participants):
    media_sent_breakdown = {}

    media = ["videos", "audio"]

    for participant in participants:
        media_sent_breakdown[participant] = {m: "00:00:00" for m in media}

    for message in all_media_sent_messages:
        for media_type in ["videos", "audio"]:
            if message.get(media_type):

                media_duration = get_media_duration(
                    media_type=media_type, message=message
                )
                total_duration = media_sent_breakdown[message["sender_name"]][
                    media_type
                ]
                updated_duration = update_time_value(
                    time_to_seconds(total_duration), media_duration
                )
                media_sent_breakdown[message["sender_name"]][
                    media_type
                ] = updated_duration

    # Remove empty values, could probably reuse this code...
    for participant_key, media_keys in media_sent_breakdown.items():
        for media_type in list(media_keys.keys()):
            item = media_keys[media_type]

            if item != "00:00:00":
                media_sent_breakdown[participant_key][media_type] = item
            else:
                del media_sent_breakdown[participant_key][media_type]

    return media_sent_breakdown


def get_file_size_of_media(all_media_sent_messages, participants):
    media_disk_space = {}
    for participant in participants:
        media_disk_space[participant] = {
            media_type: {"b": 0} for media_type in MEDIA_TYPES
        }

    for message in all_media_sent_messages:
        for media_type in MEDIA_TYPES:
            if message.get(media_type):
                for file in message.get(media_type):
                    file_path = (
                        os.path.dirname(__file__).replace("src", "") + file["uri"]
                    )
                    file_size = (
                        os.stat(file_path).st_size if os.path.isfile(file_path) else 0
                    )

                    media_disk_space[message["sender_name"]][media_type][
                        "b"
                    ] += file_size
    # Remove empty values, could probably reuse this code...
    for participant_key, media_keys in media_disk_space.items():
        for media_type in list(media_keys.keys()):
            items = {k: v for k, v in media_keys[media_type].items() if v != 0}

            if items:
                media_disk_space[participant_key][media_type] = items
            else:
                del media_disk_space[participant_key][media_type]

    for participant_key in media_disk_space.keys():
        running_total = 0
        for media_key, media_value in media_disk_space[participant_key].items():
            if media_value["b"] > 0:
                media_disk_space[participant_key][media_key]["mb"] = round(
                    media_value["b"] / (1024 * 1024), 2
                )
                media_disk_space[participant_key][media_key]["gb"] = round(
                    media_value["b"] / (1024 * 1024 * 1024), 2
                )
                running_total += media_value["b"]

        if running_total > 0:
            media_disk_space[participant_key]["totals"] = {
                "b": running_total,
                "mb": round(running_total / (1024 * 1024), 2),
                "gb": round(running_total / (1024 * 1024 * 1024), 2),
            }

    return media_disk_space


def get_media_sent_by_type_count_breakdowns(all_media_sent_messages):
    media_sent_breakdown = {}
    for message in all_media_sent_messages:
        for media_type in MEDIA_TYPES:
            if message.get(media_type):
                media_sent_breakdown[media_type] = media_sent_breakdown.get(
                    media_type, 0
                ) + len(message.get(media_type))

    media_sent_breakdown = dict(
        sorted(media_sent_breakdown.items(), key=lambda item: item[1], reverse=True)
    )
    return media_sent_breakdown


def get_media_detail_sent_by_specific_participant(
    all_media_sent_messages, specific_participant, specific_mediatype
):
    data = {}
    if specific_mediatype:
        data[specific_participant] = {specific_mediatype: []}
    else:
        data[specific_participant] = {
            "photos": [],
            "videos": [],
            "files": [],
            "audio": [],
            "gifs": [],
        }

    for message in all_media_sent_messages:
        for media_type in [specific_mediatype] if specific_mediatype else MEDIA_TYPES:
            if message.get("sender_name") == specific_participant and message.get(
                media_type
            ):
                data[specific_participant][media_type].append(message[media_type])

    for media_type in data[specific_participant]:
        data[specific_participant][media_type] = [
            item
            for sublist in data[specific_participant][media_type]
            for item in sublist
        ]
    return data


def main(
    *,
    data_to_parse,
    date_range_start,
    date_range_end,
    specific_participant,
    specific_mediatype,
    mediatype_timelength,
    mediatype_filesize,
):
    messages, participants = get_data_to_parse(
        data_to_parse, date_range_start, date_range_end
    )

    data = {}
    media_sender = initialise_counter_dict(participants)
    all_media_sent_messages = get_all_media_sent_messages(messages)
    if specific_participant:
        data["specific_participant"] = get_media_detail_sent_by_specific_participant(
            all_media_sent_messages, specific_participant, specific_mediatype
        )
    if specific_mediatype:
        data[f"{specific_mediatype}_sent_totals"] = count_media_sent_by_participants(
            all_media_sent_messages, media_sender
        )
    else:
        data["media_sent_totals"] = count_media_sent_by_participants(
            all_media_sent_messages, media_sender
        )
    data["media_sent_breakdowns_participant"] = (
        get_media_sent_by_participant_count_breakdowns(
            all_media_sent_messages, participants
        )
    )
    data["media_sent_breakdowns_media_type"] = get_media_sent_by_type_count_breakdowns(
        all_media_sent_messages
    )

    if mediatype_timelength:
        data["media_type_time_length"] = get_time_length_of_media_types(
            all_media_sent_messages, participants
        )
    if mediatype_filesize:
        data["media_type_file_size"] = get_file_size_of_media(
            all_media_sent_messages, participants
        )

    write_to_file(
        file_name="media_mogul_results.json",
        data=data,
    )


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-f", "--file", type=str, required=True)
    parser.add_argument("--multichat", type=bool, default=False)
    parser.add_argument(
        "--drstart",
        type=str,
        help="The date range start for getting messages, format needs to be (YYYY-MM)",
    )
    parser.add_argument(
        "--drend",
        type=str,
        help="The date range end for getting messages, format needs to be (YYYY-MM)",
    )
    parser.add_argument(
        "--participant",
        type=str,
        help="Get a certain participants media",
    )
    parser.add_argument(
        "--mediatype",
        type=str,
        help="Get a specific media type",
        choices=MEDIA_TYPES,
    )
    parser.add_argument(
        "--timelength",
        type=bool,
        help="Use with media type to get the number of minutes of infomation",
    )
    parser.add_argument(
        "--filesize",
        type=bool,
        help="Get the total disk space taken up by a participants media",
    )
    args = parser.parse_args()

    main(
        data_to_parse=initial_file_load(args.file, args.multichat),
        date_range_start=args.drstart,
        date_range_end=args.drend,
        specific_participant=args.participant,
        specific_mediatype=args.mediatype,
        mediatype_timelength=args.timelength,
        mediatype_filesize=args.filesize,
    )
