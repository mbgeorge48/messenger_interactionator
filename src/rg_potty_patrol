#!/usr/bin/env python


import argparse

from utils import (get_data_to_parse, initial_file_load,
                   initialise_counter_dict, load_json, write_to_file)


def get_all_naughty_messages(messages, potty_words, potty_mouth_counter):
    participant_specific_count = {}

    for message in messages:
        sender_name = message["sender_name"]
        content = message.get("content", "")

        # Skip messages with no content
        if not content:
            continue

        # Initialize counters for the sender
        participant_specific_count.setdefault(sender_name, {})
        potty_mouth_counter.setdefault(sender_name, 0)

        # Check for potty words in the message content
        for potty_word in potty_words:
            if potty_word in content.lower():
                # Update overall counter for the sender
                potty_mouth_counter[sender_name] += 1

                # Update specific counter for the sender and potty word
                participant_specific_count[sender_name][potty_word] = (
                    participant_specific_count[sender_name].get(potty_word, 0) + 1
                )

    # Sort specific counters for each participant
    for participant in participant_specific_count:
        participant_specific_count[participant] = dict(
            sorted(
                participant_specific_count[participant].items(),
                key=lambda item: item[1],
                reverse=True,
            )
        )

    return participant_specific_count, potty_mouth_counter


def main(data_to_parse, date_range_start, date_range_end, potty_file):
    # Get messages and participants
    messages, participants = get_data_to_parse(
        data_to_parse, date_range_start, date_range_end
    )

    # Load potty words from file
    potty_words = load_json(potty_file)

    # Initialize counters
    potty_mouth_counter = initialise_counter_dict(participants)

    # Get naughty messages counts
    participant_specific_count, potty_mouth_counter = get_all_naughty_messages(
        messages, potty_words, potty_mouth_counter
    )

    # Prepare data for writing to file
    data = {
        "participant_specific_count": participant_specific_count,
        "potty_mouth_counter": potty_mouth_counter,
    }

    # Write results to file
    write_to_file("potty_patrol_results.json", data)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-f", "--file", type=str, required=True)
    parser.add_argument("--multichat", type=bool, default=False)
    parser.add_argument(
        "--drstart",
        type=str,
        help="The date range start for getting messages, format needs to be (YYYY-MM)",
    )
    parser.add_argument(
        "--drend",
        type=str,
        help="The date range end for getting messages, format needs to be (YYYY-MM)",
    )
    parser.add_argument(
        "--pottyfile",
        type=str,
        help="list of naughty words to look out for (json)",
        default="potty_words.json",
    )

    args = parser.parse_args()

    main(
        initial_file_load(args.file, args.multichat),
        args.drstart,
        args.drend,
        args.pottyfile,
    )
